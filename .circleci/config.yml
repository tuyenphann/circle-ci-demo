version: 2.1

orbs:
  slack: circleci/slack@4.9.3

executors:
  node14:
    docker:
      - image: circleci/node:14
    working_directory: ~/project

commands:
  merge:
    description: "Compare and pull changes"
    parameters:
      git-username:
        type: string
        default: tuyenphann
      git-email:
        type: string
        default: tuyenphan@kms-technology.com
      target-branch:
        type: enum
        enum: [local/test1, local/test2]
        default: local/test1
      source-branch:
        type: enum
        enum: [main, local/test1, local/test2]
        default: main
    steps:
      - run:
          name: Compare and pull changes
          command: |
            echo "ðŸ”¥ Configuring Git"
            git config user.name "<< parameters.git-username >>"
            git config user.email "<< parameters.git-email >>"
            git config pull.rebase false
            
            echo "ðŸ”¥ Checking out to << parameters.target-branch >>"
            git checkout << parameters.target-branch >>
            echo 'export DEPLOYED_BRANCH="<< parameters.target-branch >>"' >> $BASH_ENV

            UPSTREAM=origin/<< parameters.source-branch >>
            LOCAL=$(git rev-parse @)
            REMOTE=$(git rev-parse "$UPSTREAM")
            BASE=$(git merge-base @ "$UPSTREAM")

            if [ $LOCAL = $REMOTE ]; then
              echo "ðŸ”¥ << parameters.target-branch >> branch is up-to-date as compared with << parameters.source-branch >> branch"
              exit 0
            elif [ $REMOTE = $BASE ]; then
              echo "ðŸ”¥ << parameters.target-branch >> branch is ahead of << parameters.source-branch >> branch"
              exit 0
            else
              echo "ðŸ”¥ Pulling from << parameters.source-branch >>"
              git pull --no-edit origin << parameters.source-branch >>

              if [[ -z "${CHANGES}" ]]
              then
                echo 'export CHANGES="- << parameters.source-branch >>"' >> $BASH_ENV
                exit 0
              else
                echo 'export CHANGES="${CHANGES}\n- << parameters.source-branch >>"' >> $BASH_ENV
              fi
            fi
  push:
    description: "Push changes"
    parameters:
      git-username:
        type: string
        default: tuyenphann
      git-email:
        type: string
        default: tuyenphan@kms-technology.com
      target-branch:
        type: enum
        enum: [local/test1, local/test2]
        default: local/test1
    steps:
      - run:
          name: Push changes
          command: |
            if [[ -z "${CHANGES}" ]]
            then
              echo "ðŸ”¥ No changes"
              exit 0
            fi

            echo "ðŸ”¥ Configuring Git"
            git config user.name "<< parameters.git-username >>"
            git config user.email "<< parameters.git-email >>"
            git config pull.rebase false

            echo "ðŸ”¥ Pushing to << parameters.target-branch >>"
            git push
  build-and-deploy:
    description: "Build and deploy project"
    parameters:
      env:
        type: enum
        enum: [test1, test2]
        default: test1
    steps:
      - run:
          name: Build and deploy project
          command: |
            if [[ -z "${CHANGES}" ]]
            then
              echo "ðŸ”¥ No changes"
              exit 0
            fi

            echo "ðŸ”¥ Installing dependencies"
            npm install

            echo "ðŸ”¥ Configuring environment variables"
            cp -a ./envs/<< parameters.env >>/. ./src/variables/

            echo "ðŸ”¥ Building project"
            npm run build

            echo "ðŸ”¥ Installing Firebase Tools"
            npm install --prefix=$HOME/.local --global firebase-tools

            echo "ðŸ”¥ Deploying Firebase"
            firebase deploy --only hosting:<< parameters.env >> --token ${FIREBASE_TOKEN}
  notify-slack:
    description: "Notify Slack"
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "attachments": [
                {
                  "color": "#FC100D",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":red_circle: Build <$CIRCLE_BUILD_URL|#$CIRCLE_BUILD_NUM> of *$CIRCLE_PROJECT_REPONAME* is failed"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":technologist: Job `$CIRCLE_JOB` is triggered by *$CIRCLE_PROJECT_USERNAME*"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":tanabata_tree: Deployed branch: `${DEPLOYED_BRANCH}`"
                      }
                    }
                  ]
                }
              ]
            }
          template: ${SLACK_SUCCESS_TEMPLATE}
      - slack/notify:
          event: pass
          custom: |
            "attachments": [
              {
                "color": "#4BB543",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":large_green_circle: Build <$CIRCLE_BUILD_URL|#$CIRCLE_BUILD_NUM> of *$CIRCLE_PROJECT_REPONAME* is successfully"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":technologist: Job `$CIRCLE_JOB` is triggered by *$CIRCLE_PROJECT_USERNAME*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":tanabata_tree: Deployed branch: `${DEPLOYED_BRANCH}`"
                    }
                  },
                  
                ]
              }
            ]

jobs:
  merge-and-deploy-test1:
    executor: node14
    description: "Merge and deploy test1"
    steps:
      - checkout
      - merge:
          target-branch: local/test1
          source-branch: main
      - push:
          target-branch: local/test1
      - build-and-deploy:
          env: test1
      - notify-slack
            
  merge-and-deploy-test2:
    executor: node14
    description: "Merge test2"
    steps:
      - checkout
      - merge:
          target-branch: local/test2
          source-branch: main
      - merge:
          target-branch: local/test2
          source-branch: local/test1
      - push:
          target-branch: local/test2
      - build-and-deploy:
          env: test2
      - notify-slack

workflows:
  deploy-test1:
    jobs:
      - merge-and-deploy-test1:
          context: slack-secrets
          filters:
            branches:
              only:
                - main
  deploy-test2:
    jobs:
      - merge-and-deploy-test2:
          context: slack-secrets
          filters:
            branches:
              only:
                - main